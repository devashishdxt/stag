use std::path::Path;

use anyhow::Result;
use clap::Subcommand;
use stag_api::types::ics::core::ics24_host::identifier::{ChainId, Identifier, PortId};

use crate::util::stag;

#[derive(Debug, Subcommand)]
pub enum QueryCommand {
    /// Fetches on-chain balance of a given denom
    Balance {
        /// Chain ID
        chain_id: ChainId,
        /// Denom of tokens
        denom: Identifier,
        /// True if given denom is an IBC denom generated by solo machine
        #[clap(short, long)]
        ibc_denom: bool,
    },
}

impl QueryCommand {
    pub async fn run(self, signer: impl AsRef<Path>, db_uri: &str) -> Result<()> {
        match self {
            Self::Balance {
                chain_id,
                denom,
                ibc_denom,
            } => {
                let balance = if ibc_denom {
                    stag(signer, db_uri)
                        .await?
                        .get_ibc_balance(&chain_id, &PortId::transfer(), &denom)
                        .await
                } else {
                    stag(signer, db_uri)
                        .await?
                        .get_balance(&chain_id, &denom)
                        .await
                }?;

                println!("current balance: {} {}", balance, denom);

                Ok(())
            }
        }
    }
}
