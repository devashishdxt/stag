use std::path::Path;

use anyhow::{Context, Result};
use clap::Subcommand;
use primitive_types::U256;
use stag_api::types::ics::core::ics24_host::identifier::{ChainId, Identifier, PortId};

use crate::{u256::U256Parser, util::stag};

#[derive(Debug, Subcommand)]
pub enum BankCommand {
    /// Sends tokens from ICA (Interchain Account) on host chain
    Send {
        /// Chain ID
        chain_id: ChainId,
        /// An optional request ID for tracking purposes
        #[clap(long)]
        request_id: Option<String>,
        /// Receiver address on IBC enabled chain
        to_address: String,
        /// Amount of tokens to send
        #[clap(value_parser = U256Parser)]
        amount: U256,
        /// Denom of tokens to send
        denom: Identifier,
        /// True if given denom is an IBC denom generated by solo machine
        #[clap(short, long)]
        ibc_denom: bool,
        /// Memo value to be used in cosmos sdk transaction
        #[clap(long)]
        memo: Option<String>,
    },
}

impl BankCommand {
    pub async fn run(self, signer: impl AsRef<Path>, db_uri: &str) -> Result<()> {
        match self {
            Self::Send {
                chain_id,
                request_id,
                to_address,
                amount,
                mut denom,
                ibc_denom,
                memo,
            } => {
                let stag = stag(signer, db_uri).await?;

                if ibc_denom {
                    denom = stag
                        .get_ibc_denom(&chain_id, &PortId::transfer(), &denom)
                        .await?
                        .parse()
                        .context("unable to parse ibc denom")?;
                }

                stag.ica_send(
                    chain_id,
                    request_id,
                    to_address.clone(),
                    amount,
                    denom.clone(),
                    memo.unwrap_or_default(),
                )
                .await?;

                println!("successfully sent {} {} to {}", amount, denom, to_address);

                Ok(())
            }
        }
    }
}
